@page "/register"
@layout EmptyLayout
@inject NavigationManager NavigationManager
@using ApiReturnTypes
@using System
@using Services
@inject FieldInputChecker fieldInputChecker
@using Helpers
@inject UserApiClient userApiClient
@inject UserStateService userStateService

<div class="register_page">
    <div class="text-center">
        <h1>Password Manager.</h1>
        <div class="container_for_box_centering">
            <div class="register_box">
                <EditForm class="form-signin mb-4" Model="@_user" OnSubmit="@RegisterUser">
                    <div class="form-group">
                        <InputText class="form-control" aria-describedby="emailHelp" placeholder="Name" @bind-Value=@_user.name @onfocusout="@(() => OnInputFocusOut( _user.name , RegisterFormEnum.name))" />
                    </div>
                    <div class="form-group">
                        <InputText class="form-control" aria-describedby="emailHelp" placeholder="Surname" @bind-Value=@_user.surname @onfocusout="@(() => OnInputFocusOut( _user.surname , RegisterFormEnum.surname))" />
                    </div>
                    <div class="form-group">
                        <InputText class="form-control" placeholder="Email" @bind-Value=@_user.email @onfocusout="@(() => OnInputFocusOut( _user.email , RegisterFormEnum.email))" />
                    </div>
                    <div class="form-group">
                        <InputText type="password" class="form-control" placeholder="Password" @bind-Value=@_user.password @onfocusout="@(() => OnInputFocusOut( _user.password , RegisterFormEnum.password))" />
                    </div>
                    <div class="form-group">
                        <InputText type="password" class="form-control" placeholder="Password again" @bind-Value="@confirmPasswordString" @oninput=@((args) => CheckPasswordConfirmation(args.Value.ToString()))/>
                    </div>
                    <div class="form-group">
                        <button type="submit" id="login" name="login" class="btn btn-primary" disabled="@(!(_registerFormStatus.getStatus() && passwordConfirmationIsOK))">Register</button>
                    </div>
                </EditForm>
                <div class="form-group">
                    <button class="btn btn-primary" @onclick=GoBackToLoginPage>Back to login</button>
                </div>
            </div>
        </div>
    </div>

    @code {
        private User _user = new User();
        private RegisterFormStatus _registerFormStatus = new RegisterFormStatus();
        string confirmPasswordString = "";
        bool passwordConfirmationIsOK = false;
        private async Task RegisterUser()
        {
            _user.is_active = true;
            _user.is_confirmed = false; // user needs to confirm account by email
            _user.date_of_registration = DateTime.Now.Date.ToString("dd-MMM-yyyy");

            var ret = await userApiClient.AddUserAsync(_user);
            if(ret != -1)
            {
                //The user has been successfully added
                userStateService.AuthenticateUser();
                userStateService.setUserId(ret.ToString());
                userStateService.setUserPasswords();
                //TODO: send an email to the user for account confirmation
                NavigationManager.NavigateTo("/fetchpasswords");
            }
            else
            {
                //TODO : treat the situation where the api client returns an error code
                NavigationManager.NavigateTo("/login");
            }
        }

        void OnInputFocusOut(string fieldValue, RegisterFormEnum value)
        {
            switch(value)
            {
                case RegisterFormEnum.name:
                    {
                        if (fieldInputChecker.nameIsOk(ref fieldValue))
                        {
                            _registerFormStatus.nameIsOK = true;
                        }
                        else
                        {
                            _registerFormStatus.nameIsOK = false;
                            //TODO: show an error toast and make the border red
                        }
                        break;
                    }
                case RegisterFormEnum.surname:
                    {
                        if (fieldInputChecker.surnameIsOk(ref fieldValue))
                        {
                            _registerFormStatus.surnameIsOK = true;
                        }
                        else
                        {
                            _registerFormStatus.surnameIsOK = false;
                            //TODO: show an error toast and make the border red
                        }
                        break;
                    }
                case RegisterFormEnum.email:
                    {
                        if (fieldInputChecker.emailIsOk(ref fieldValue))
                        {
                            _registerFormStatus.emailIsOK = true;
                        }
                        else
                        {
                            _registerFormStatus.emailIsOK = false;
                            //TODO: show an error toast and make the border red
                        }
                        break;
                    }
                case RegisterFormEnum.password:
                    {
                        if (fieldInputChecker.passwordIsOk(ref fieldValue))
                        {
                            _registerFormStatus.passwordIsOK = true;
                        }
                        else
                        {
                            _registerFormStatus.passwordIsOK = false;
                            //TODO: show an error toast and make the border red
                        }
                        break;
                    }
            }
        }
        void CheckPasswordConfirmation(string inputVal)
        {
            passwordConfirmationIsOK = inputVal == _user.password;
        }

        public Task GoBackToLoginPage()
        {
            NavigationManager.NavigateTo("/login");
            return Task.CompletedTask;
        }
    }
</div>
