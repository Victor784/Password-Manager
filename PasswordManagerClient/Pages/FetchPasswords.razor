@page "/fetchpasswords"
@using PasswordManagerClient.Services
@using ApiReturnTypes
@using PasswordManagerClient.Elements
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorBootstrap
@using System.Windows;
@inject IClipboardService ClipboardService
@inject ExpirationCalculator expirationCalculator

@inject NavigationManager NavigationManager;
@inject Services.UserStateService UserStateService;


@code {

    public string SearchText = "";
    private Password? selectedRow;
    private bool IsCheckboxChecked = false;
    private void SelectRow(Password item)
    {
        selectedRow = item;
        DisplayPasswordOnRow();

    }
}

@code {
    List<Password> PagedPasswords;
    int itemsPerPage = 10;
    bool noMoreLeftPages = true;
    bool noMoreRightPages = false;
    int PageNr = 0;
    private List<Password>? passwords;
    List<Password> tickedPasswords;
    List<Password> FilteredPasswords;
    List<Password> DoubleFilteredPasswords;
    protected override async Task OnInitializedAsync()
    {
        var res = await UserStateService.IsUserAuthenticated();
        if (!res)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            passwords = await UserStateService.getUserPasswords();
            tickedPasswords = GetTickedPasswords();
            FilteredPasswords = GetFilteredPasswords();
            DoubleFilteredPasswords = GetDoubleFilteredPasswords();
            PagedPasswords = GetPagedPasswords(@IsCheckboxChecked ? DoubleFilteredPasswords : FilteredPasswords);
        }
  
    }
    }

<div class="top_of_the_table_row">
    <Button class="btn special_btn" @onclick="ShowAddModal"><Icon Name="IconName.PlusLg" Color="IconColor.Success" Size="IconSize.x5" /></Button>
    <input class="search_input"
           value="@SearchText"
           @oninput="HandleInputChange"
           placeholder="Search..." />
    <label>
        <input class="show_only_expired_checkbox_and_label" type="checkbox" checked="@IsCheckboxChecked" @onchange="HandleCheckboxChange"/>
        Show only expired passwords
    </label>
    <Button class="btn special_btn"  Disabled="noMoreLeftPages" @onclick="DecreasePageNr"><Icon Name="IconName.ChevronLeft" Color="IconColor.Muted" Size="IconSize.x5"/></Button>
    <Button class="btn special_btn" Disabled="noMoreRightPages" @onclick="IncreasePageNr"><Icon Name="IconName.ChevronRight" Color="IconColor.Muted" Size="IconSize.x5"  /></Button>
    <p>Page Nr : @PageNr</p>
</div>

@*Add password functionalitty*@
<AddPasswordModal @ref="addPasswordModal" Refresh=@Refresh/>


@code {
    private AddPasswordModal addPasswordModal;

    void ShowAddModal()
    {
        addPasswordModal.Show();
    }
}
@*End /// Add password functionalitty*@


@*Update password functionalitty*@

<UpdatePasswordModal @ref="updatePasswordModal" SelectedPassword="@selectedRow" Refresh=@Refresh />

@code {
    private UpdatePasswordModal updatePasswordModal;

    void ShowUpdateModal()
    {
        updatePasswordModal.Show();
    }
}
@*End /// Update password functionalitty*@

 @*Delete password functionalitty*@

<DeletePasswordModal @ref="deletePasswordModal" SelectedPassword="@selectedRow" Refresh=@Refresh />

@code {
    private DeletePasswordModal deletePasswordModal;

    void ShowDeleteModal()
    {
        deletePasswordModal.Show();
    }
}
@*End /// Delete password functionalitty*@

@code{
    async Task Refresh()
    {
        await UserStateService.setUserPasswords(); // this calls the http method and gets the latest version of the password list 
        passwords = await UserStateService.getUserPasswords(); // associated with this user
        tickedPasswords = GetTickedPasswords();
        FilteredPasswords = GetFilteredPasswords();
        DoubleFilteredPasswords = GetDoubleFilteredPasswords();
        PagedPasswords = GetPagedPasswords(@IsCheckboxChecked ? DoubleFilteredPasswords : FilteredPasswords);        
        StateHasChanged();
    }
}


@*Functionality for displaying passwords on mouseover the tablecell*@
@code{
    private bool canDisplayPassword = false;
    private string censoredText = "**************";
    private string displayedPassword = "**************";
    void DisplayPasswordOnRow()
    {
        canDisplayPassword = true;
    }

    void DisplayPasswotdInTableCell(EventArgs e, string pass_value)
    {
        if (canDisplayPassword)
        {
            displayedPassword = pass_value;
        }
        else
        {
            //do nothing
        }
    }
    void CensorPasswordValue()
    {
        displayedPassword = censoredText;
    }
}

@code{
    async Task CopyPasswordToClipboard(string copied_pass)
    {
        await ClipboardService.CopyToClipboard(copied_pass);
    }
}

@code{
    void ResetSelectedRow()
    {
        selectedRow = null;
    }
}

@if (passwords == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr class ="table_header_row">
                <th class="column_with_btns" style="width: 42px;" ></th>
                <th class="column_with_btns" style="width: 42px;"></th>
                <th>Website</th>
                <th>Email</th>
                <th style="width: 100px;" >Password</th>
                <th>Created on </th>
                <th>Last update</th>
                <th>Expires in</th>
                <th class="column_with_btns" style="width: 42px;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var password in @PagedPasswords )
            {
                <tr class = "@((@expirationCalculator.CalculateDaysUntilExpiration(@password.time_of_last_update, DateTime.Now.Date.ToString("dd-MMM-yyyy"), @password.months_until_expired) == "Expired") ? "red_table_row" : "table_row")" @onmouseover="() => SelectRow(password)" @onmouseleave="ResetSelectedRow">
                    <td>
                        @if(password == selectedRow)
                        {
                            <Button class="btn special_btn" @onclick="ShowDeleteModal"><Icon Name="IconName.XLg" Color="IconColor.Danger" Size="IconSize.x5" /></Button>
                        }
                    </td>
                    <td>
                        @if (password == selectedRow)
                        {
                            <Button class="btn special_btn" @onclick="ShowUpdateModal"><Icon Name="IconName.ThreeDotsVertical" Color="IconColor.Muted" Size="IconSize.x5" /></Button>
                        }
                    </td>
                    <td>@password.associated_website</td>
                    <td>@password.associated_email</td>
                    <td style="width: 42px; overflow: hidden;" @onmouseover="(e) => DisplayPasswotdInTableCell(e, password.password_value)" @onmouseout="CensorPasswordValue">
                        @if (@displayedPassword == @password.password_value)
                            @displayedPassword
                        else
                            @censoredText
                        </td>
                    <td>@password.time_of_creation</td>
                    <td>@password.time_of_last_update</td>
                    <td>
                        @expirationCalculator.CalculateDaysUntilExpiration(@password.time_of_last_update, DateTime.Now.Date.ToString("dd-MMM-yyyy"), @password.months_until_expired)
                    </td>
                    <td>
                        @if (password == selectedRow)
                        {
                            <Button class="btn special_btn" @onclick="() => CopyPasswordToClipboard(password.password_value)"><Icon Name="IconName.Copy" Color="IconColor.Muted" Size="IconSize.x5" /></Button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code{
    void DecreasePageNr()
    {
        if (PageNr - 1 >= 0)
        {
            PageNr = PageNr -  1;
        }

        if(PageNr == 0)
        {
            noMoreLeftPages = true;
            noMoreRightPages = false;
        }
        Refresh();
    }

    void IncreasePageNr()
    {
        //TODO: refactor this, maybe keep the passwords in another variable and get the count only in this func
        var passwordsdsadarew = IsCheckboxChecked ? DoubleFilteredPasswords : FilteredPasswords;
        var nrOfPasswords = passwordsdsadarew.Count();
        if (PageNr  + 1 <= nrOfPasswords / 10)
        {
            PageNr = PageNr + 1;
        }

        if(PageNr > nrOfPasswords/10 - 1)
        {
            noMoreRightPages = true;
            noMoreLeftPages = false;
        }
        Refresh();   
    }

    List<Password> GetPagedPasswords(List<Password> items)
    {
        int startIndex = PageNr * itemsPerPage;
        return items.Skip(startIndex).Take(itemsPerPage).ToList();
    }
}

@code{

    public List<Password> GetTickedPasswords()
    {
        return passwords.Where(
    pass_elem => expirationCalculator.CalculateDaysUntilExpiration(pass_elem.time_of_last_update, DateTime.Now.Date.ToString("dd-MMM-yyyy"), pass_elem.months_until_expired).ToLower().Equals("expired")).ToList();

    }

    public List<Password> GetFilteredPasswords()
    {
        return passwords.Where(
    pass_elem => pass_elem.associated_email.ToLower().Contains(SearchText.ToLower()) ||
         pass_elem.associated_website.ToLower().Contains(SearchText.ToLower())
    ).ToList();

    }
    
    public List<Password> GetDoubleFilteredPasswords()
    {
        return GetTickedPasswords().Where(
    pass_elem => pass_elem.associated_email.ToLower().Contains(SearchText.ToLower()) ||
         pass_elem.associated_website.ToLower().Contains(SearchText.ToLower())
    ).ToList();

    }
}

@code{
    public void HandleCheckboxChange(ChangeEventArgs e)
    {
        IsCheckboxChecked = (bool)e.Value;
        Refresh();
    }

    public void HandleInputChange(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
        Refresh();
    }
}