@page "/"
@page "/login"

@using PasswordManagerClient.Services
@using PasswordManagerClient.Helpers;

@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject UserApiClient userApi
@inject Services.UserStateService UserStateService;

<div class="login_page">
    <div class="text-center">
            <h1>Password Manager.</h1>
            <div class="container_for_box_centering">
                <div class="login_box">
                    <EditForm class="form-signin mb-4" Model="@_credential" OnSubmit="@Authenticate">
                    <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="user-name">User name</label>
                            <InputText class="form-control" id="user-name" aria-describedby="emailHelp" placeholder="E-mail" @bind-Value=@_credential.Email />
                        <ValidationMessage For="@(() => _credential.Email)" />
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value=@_credential.Password />
                        <ValidationMessage For="@(() => _credential.Password)" />
                        </div>
                        <div class="form-group">
                        <button type="submit" id="login" name="login" class="btn btn-primary" disabled="@((!context.IsModified() || !context.Validate()) || loginAttempts >= 5)" >Login</button>
                    </div>
                    </EditForm>
                    <div class="login_links">
                         <NavLink class="nav-link" href="forgotpassword">Forgot password?</NavLink>
                         <NavLink class="nav-link" href="register">Register</NavLink>
                    </div>
                </div>
            </div>
    </div>

    @code {

        private Credential _credential = new Credential();
        private int loginAttempts = 0;
        private async void  Authenticate()
        {
            @* .... perform authentication using _credential fields*@
            var result = await userApi.AuthenticateAsync(_credential.Email, _credential.Password);
            if (result.isAuthenticated)
            {
                UserStateService.AuthenticateUser();
                UserStateService.setUserId(result.id);
                UserStateService.setUserPasswords();
                NavigationManager.NavigateTo("/fetchpasswords");
            }
                
            else
                IncorrectCredentialsMessage();

        }

        void IncorrectCredentialsMessage()
        {
            //TODO make a message appear if the user inputs an incorrect password
            // making the backround red would be a nice ideea
            loginAttempts += 1;
            StateHasChanged();
        }
}
</div>
