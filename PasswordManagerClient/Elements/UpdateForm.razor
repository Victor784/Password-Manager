@using ApiReturnTypes
@using System
@using PasswordManagerClient.Services
@using BlazorBootstrap
@inject PasswordApiClient passwordApi
@inject ExpirationCalculator expirationCalculator
@inject IClipboardService ClipboardService
@inject PasswordGenerator randomPasswordGenerator
@inject UserStateService userStateService

<div>

    <div class="form-group">
        <label>Website:
            @if (displaySameWebsiteWarning)
            {
                <p>a similar entry already exists</p>
            }
        </label>
        <input type="text" @onchange='(e) => CheckForUpdateAndUpdateSaveBtnState(e, "website")' value="@CurrentWebsite" @onfocusout="() => checkIfNewWebsiteIsUnique(CurrentEmail)" />
    </div>
    <div class="form-group">
        <label>Email:</label>
        <input type="text" @onchange='(e) => CheckForUpdateAndUpdateSaveBtnState(e, "email")' value="@CurrentEmail" />
    </div>
    <div class="form-group">
        <label style=" display: flex">
            Password:
            <div class="password_small_buttons" style="width: 100px ; height: 24px">
                <Button class="btn special_btn" @onclick="GenerateRandomPass"><Icon Name="IconName.CaretRightSquare" Color="IconColor.Muted" Size="IconSize.x6" /></Button>
                @if (passInputHasText)
                {

                    <Button class="btn special_btn" @onclick="SwitchPasswordVisibility"><Icon Name="@(passwordInputType == "password" ? IconName.Eye : IconName.EyeFill)" Color="IconColor.Muted" Size="IconSize.x6" /></Button>
                    <Button class="btn special_btn" @onclick="(e) => CopyPasswordToClipboard(password)"><Icon Name="IconName.Copy" Color="IconColor.Muted" Size="IconSize.x6" /></Button>

                }
            </div>
        </label>
        <input type="@passwordInputType" @oninput="ManagePasswordInputChange" @bind="password" />
    </div>
    <div class="form-group">
        <label>Password lifetime:</label>
        <div class="label_radio_btn_element">
        <label>1 month</label>
        <input class="add_pass_modal_radio_btn" type="radio" checked="@(exp_date == "1 month")"
                   name="Gender" @onchange='() => HandleRadioButtonClicked ("1 month")' />
        </div>
        <div class="label_radio_btn_element">
        <label>2 months</label>
            <input class="add_pass_modal_radio_btn"  type="radio" checked="@(exp_date == "2 months")"
                   name="Gender" @onchange='() => HandleRadioButtonClicked ("2 months")' />
        </div>
        <div class="label_radio_btn_element">
        <label>3 months</label>
        <input class="add_pass_modal_radio_btn" type="radio" checked="@(exp_date == "3 months")"
                   name="Gender" @onchange='() => HandleRadioButtonClicked ("3 months")' />
        </div>

    </div>
    <div>
        <p>Expires in : @daysUntilExpiration</p>
    </div>
    <div class="form_buttons_group">
        <Button class="btn btn-primary" Color="ButtonColor.Primary" id="save-button" @onclick="SubmitUpdateForm" Disabled="@dataWasNotChangedByUser">Save changes</Button>
        <Button class="btn btn-primary" Color="ButtonColor.Secondary" @onclick="CloseModal">Close</Button>
    </div>
</div>

@code {
    private string passwordInputType = "password";
    private bool passInputHasText = false;
    private bool displaySameWebsiteWarning = false;
    [Parameter]
    public EventCallback<int> CloseModalParent { get; set; }
    [Parameter]
    public Password PasswordToBeChanged { get; set; }

    [Parameter]
    public EventCallback UpdateTable { get; set; }

    private string website;
    private string email;
    private string password;
    private string exp_date;
    private  string daysUntilExpiration = "";
    bool dataWasNotChangedByUser = true;
    string CurrentWebsite = "";
    string CurrentEmail = "";
    string CurrentPassword = "";

    

    public async Task SubmitUpdateForm()
    {
        Password updatedPassword = new Password(PasswordToBeChanged.user_id, website, email, password, PasswordToBeChanged.time_of_creation, DateTime.Now.Date.ToString("dd-MMM-yyyy"), (exp_date != "") ? exp_date : PasswordToBeChanged.months_until_expired);
        var response = await passwordApi.UpdatePasswordAsync(PasswordToBeChanged.user_id, updatedPassword);
        await UpdateTable.InvokeAsync();
        await CloseModalParent.InvokeAsync(response);
    }

    public async void CloseModal()
    {
        await CloseModalParent.InvokeAsync(-1);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        website = PasswordToBeChanged.associated_website;
        email = PasswordToBeChanged.associated_email;
        password = PasswordToBeChanged.password_value;
        daysUntilExpiration = expirationCalculator.CalculateDaysUntilExpiration(PasswordToBeChanged.time_of_last_update, DateTime.Now.Date.ToString("dd-MMM-yyyy"), PasswordToBeChanged.months_until_expired);
        dataWasNotChangedByUser = true;
        CurrentWebsite = website;
        CurrentEmail = email;
        CurrentPassword = password;

    }

    void CheckForUpdateAndUpdateSaveBtnState(ChangeEventArgs e , string inputName)
    {
        switch(inputName)
        {
            case "website":
                {
                    if (e.Value.ToString() != PasswordToBeChanged.associated_website)
                        EnableSaveBtnState();
                    else
                        dataWasNotChangedByUser = true;
                    website = e.Value.ToString();
                    break;
                }
            case "email":
                {
                    if (e.Value.ToString() != PasswordToBeChanged.associated_email)
                        EnableSaveBtnState();
                    else
                        dataWasNotChangedByUser = true;
                    email = e.Value.ToString();
                    break;
                }
            case "password":
                {
                    if (e.Value.ToString() != PasswordToBeChanged.password_value)
                        EnableSaveBtnState();
                    else
                        dataWasNotChangedByUser = true;
                    password = e.Value.ToString();
                    break;
                }
        }
    }

    void EnableSaveBtnState()
    {
        dataWasNotChangedByUser = false;
    }

    void HandleRadioButtonClicked(string selectedButton)
    {
        switch(selectedButton)
        {
            case "1 month":
                {
                    exp_date = "1 month";
                    dataWasNotChangedByUser = false;
                    break;
                }
            case "2 months":
                {
                    exp_date = "2 months";
                    dataWasNotChangedByUser = false;
                    break;
                }
            case "3 months":
                {
                    exp_date = "3 months";
                    dataWasNotChangedByUser = false;
                    break;
                }
        }
    }
    public void ManagePasswordInputChange(ChangeEventArgs e)
    {
        password = e.Value.ToString();
        if (password != "")
            passInputHasText = true;
        else
            passInputHasText = false;
        StateHasChanged();
    }

    public async void SwitchPasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
        }
        else if (passwordInputType == "text")
        {
            passwordInputType = "password";
        }

    }

    async void CopyPasswordToClipboard(string copied_pass)
    {
        await ClipboardService.CopyToClipboard(copied_pass);
    }

    public Task GenerateRandomPass()
    {
        password = randomPasswordGenerator.generateRandomPassword();
        passInputHasText = true;
        return Task.CompletedTask;
    }

}

@code {
    void checkIfNewWebsiteIsUnique(string currentWebsite)
    {
        var allPasswords = userStateService.getUserPasswords().Result;

        bool isUnique = true;
        foreach (var password in allPasswords)
        {
            if (password.associated_email == website && password.associated_email != currentWebsite) // chheck if new website is not present already in the list
            {
                isUnique = false;
                break;
            }
        }
        if (isUnique)
        {
            displaySameWebsiteWarning = false;
        }
        else
        {
            displaySameWebsiteWarning = true;
        }
    }
}